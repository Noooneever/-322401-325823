# -*- coding: utf-8 -*-
"""
/***************************************************************************
 InformatykaPluginDialog
                                 A QGIS plugin
 Wtyczka licząca przewyższenia pomiędzy punktami na warstwie oraz pole powierzchni metodą Gaussa
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-10
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Piotr Wieczorek
        email                : Piotr9110@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from qgis.core import QgsWkbTypes, QgsMessageLog, Qgis, QgsProject, QgsPointXY
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'informatyka_plugin_dialog_base.ui'))


class InformatykaPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(InformatykaPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        self.pushButtonElevation.clicked.connect(self.elevation)
        self.pushButtonArea.clicked.connect(self.area)
        
    def elevation(self):
        try:
            obiekt1 = self.mLayerChoose.currentLayer()
            if obiekt1 is None:
                iface.messageBar().pushMessage("Różnica wysokosci", 'Nie wybrano aktywnej warstwy', level=Qgis.Warning)
                return

            obiekt2 = self.mLayerChoose.currentLayer().selectedFeatures()
            if len(obiekt2) != 2:
                iface.messageBar().pushMessage("Różnica wysokosci", 'Aby policzyć wysokosc wybierz DWA PUNKTY', level=Qgis.Warning)
                return

            H1 = float(obiekt2[0]['wysokosc'])
            H2 = float(obiekt2[1]['wysokosc'])
            elevation = round(H2 - H1, 3)
            self.labelElevationResult.setText(str(elevation) + 'm')
        except Exception as e:
            iface.messageBar().pushMessage("Różnica wysokosci", f'Wystąpił błąd: {str(e)}', level=Qgis.Critical)
        
    def area(self):
        try:
            objects = self.mLayerChoose.currentLayer().selectedFeatures()
            points = []
            for o in objects:
                geom = o.geometry()
                point = geom.asPoint()
                x = point.x()
                y = point.y()
                p = QgsPointXY(x, y)
                points.append(p)

            if len(objects) < 3:
                iface.messageBar().pushMessage("Pole powierzchni", 'Aby policzyć pole powierzchni wybierz co najmniej TRZY PUNKTY', level=Qgis.Warning)
                return

            pole = 0
            dl = len(points)
            for e in range(dl):
                a = (e + 1) % dl
                pole += (points[a].x() + points[e].x()) * (points[a].y() - points[e].y())
            pole /= 2
            pole = round(abs(pole / 10000), 3)
            self.labelAreaResult.setText(str(pole) + 'ha')
        except Exception as e:
            iface.messageBar().pushMessage("Pole powierzchni", f'Wystąpił błąd: {str(e)}', level=Qgis.Critical)